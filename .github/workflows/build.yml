name: Build and Test Wheels

on:
  push:
    branches:
      - master

jobs:
  build-gpu-wheel:
    name: wheel-${{matrix.python-version}}-cuda${{matrix.cuda-version}}-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"] #, "macos-latest", "windows-latest"]
        python-version: ["3.12"]#["3.9", "3.10", "3.11", "3.12"]
        cuda-version: ["12.4.0"]
    steps:
      - uses: actions/checkout@v2

      # - uses: Jimver/cuda-toolkit@v0.2.16
      #   id: cuda-toolkit
      #   with:
      #     cuda: ${{matrix.cuda-version}}
      #     linux-local-args: '["--toolkit", "--driver"]'
      #     log-file-suffix: '${{matrix.os}}-${{matrix.python-version}}-${{matrix.cuda-version}}.txt'

      # - run: |
      #     nvcc -V

      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge, pytorch, nvidia
          environment-file: environment.yml
          activate-environment: test_gpu_install_env
      
      - name: Install CUDA libraries with conda
        run: |
          mamba install -c conda-forge cupy cuda-version=${{ matrix.cuda-version }}
          mamba install -c conda-forge cuda-nvcc cuda-cudart
          echo $(which nvcc)
          nvcc -V

      # - name: Diagnose cuda things
      #   run: |
      #     mamba install conda
      #     python -c "import conda.plugins.virtual_packages.cuda as cuda; print('Conda sees cuda:', cuda.cuda_version())"
      #     echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
      #     echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_PATH"

      # - name: Diagnose part 2
      #   run: |
      #     echo "$LD_LIBRARY_PATH"
      #     python -c "import ctypes; dll = ctypes.cdll; libcuda = dll.LoadLibrary('libcuda.so'); print(libcuda.cuInit(ctypes.c_uint(0))); version_int = ctypes.c_int(0); print(libcuda.cuDriverGetVersion(ctypes.byref(version_int))); print(version_int.value)" 
      #     python -c "import conda.plugins.virtual_packages.cuda as cuda; print('Conda sees cuda:', cuda.cuda_version())"

      # - name: Install CuPy (tracks CUDA_PATH) #and specify the install version
      #   run: mamba install -c conda-forge cupy
        # run: |
        #   echo "$CUDA_PATH"
        #   export cuda_version_part=${{matrix.cuda-version}}
        #   python -m pip install "cupy-cuda"${cuda_version_part:0:2}"x"

      - name: Run Prebuild
        run: |
          cp scripts/prebuild.py ./
          python prebuild.py

      - name: build wheels
        run: |
          python -m pip install build twine
          python -m build .

      - name: Produce artifact of wheel for testing
        uses: actions/upload-artifact@v4
        with:
          name: built_wheel
          path: ./dist/*.whl

      - name: Pip install the built wheel
        run: python -m pip install ./dist/*.whl

      - name: Run module tests
        run: |
          cd ./few/tests/module_tests
          python -m unittest discover