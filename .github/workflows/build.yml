name: Build and Test Wheels

on:
  push:
    branches:
      - master

jobs:
  build-gpu-wheel:
    name: wheel-${{matrix.python-version}}-cuda${{matrix.cuda-version}}-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "macos-13"]#, "windows-latest"]
        python-version: ["3.12"]#["3.9", "3.10", "3.11", "3.12"]
        cuda-version: ["12.4.0"]
    steps:
      - uses: actions/checkout@v4

      # - uses: Jimver/cuda-toolkit@v0.2.16
      #   id: cuda-toolkit
      #   with:
      #     cuda: ${{matrix.cuda-version}}
      #     linux-local-args: '["--toolkit", "--driver"]'
      #     log-file-suffix: '${{matrix.os}}-${{matrix.python-version}}-${{matrix.cuda-version}}.txt'

      # - run: |
      #     nvcc -V

      - uses: conda-incubator/setup-miniconda@v3
        if: ${{matrix.os != 'macos-latest'}}
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge, pytorch, nvidia
          environment-file: environment.yml
          activate-environment: test_gpu_install_env
      
      - uses: conda-incubator/setup-miniconda@v3
        if: ${{matrix.os == 'macos-latest'}}
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge, pytorch, nvidia
          environment-file: macos-arm-environment.yml
          activate-environment: test_gpu_install_env
      

      - name: Install CUDA libraries with conda and link directories
        if: ${{ !startsWith(matrix.os, 'macos') }}
        run: |
          mamba install -c conda-forge cupy cuda-nvcc cuda-libraries-dev cuda-version=${{ matrix.cuda-version }}
          echo "(CUDAHOME=$CONDA_PREFIX)" >> "$GITHUB_ENV"
          echo $(which nvcc)
          nvcc -V
          ln -s $CONDA_PREFIX/lib $CONDA_PREFIX/lib64
          cp -r $CONDA_PREFIX/targets/$(ls $CONDA_PREFIX/targets/ | head -1)/include/* $CONDA_PREFIX/include/ 

      - name: Run Prebuild
        run: |
          cp scripts/prebuild.py ./
          python prebuild.py

      # - name: build wheels
      #   run: |
      #     python -m pip install build twine
      #     python -m build .

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        with: 
          config-file: "pyproject.toml"
      # - name: Produce artifact of wheel for testing
        uses: actions/upload-artifact@v4
        with:
          # name: wheel-${{matrix.python-version}}-cuda${{matrix.cuda-version}}-${{matrix.os}}
          # path: ./dist/*.whl
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

      # - name: Pip install the built wheel
      #   run: python -m pip install ./dist/*.whl

      # - name: Run module tests
      #   run: |
      #     cd ./few/tests/module_tests
      #     python -m unittest discover

      # - name: Upload wheel to test PYPI
      #   run: |
      #     twine upload --repository-url https://test.pypi.org/legacy/ --username __token__ --password ${{secrets.TEST_PYPI_UPLOAD_TOKEN}} ./dist/*