name: Build and Test Wheels

on:
  push:
    branches:
      - master

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Prebuild
        run: |
          cp scripts/prebuild.py ./
          python prebuild.py

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  build-gpu-wheel:
    needs: build_sdist
    name: wheel-${{matrix.python-version}}-cuda${{matrix.cuda-version}}-${{matrix.os}}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "macos-13"] #, "windows-latest"]
        python-version: ["3.12"] #["3.9", "3.10", "3.11", "3.12"]
        cuda-version: ["12.4.0"]
    steps:
      - uses: actions/checkout@v4

      - name: Get the sdist from the previous job
        uses: actions/download-artifact@v4
        with:
          name: cibw-sdist
          path: dist/
        
      - run: |
          ls ./
          ls ./dist/

      # - name: Intel env setup
      #   uses: conda-incubator/setup-miniconda@v3
      #   if: ${{matrix.os != 'macos-latest'}}
      #   with:
      #     auto-update-conda: true
      #     python-version: ${{ matrix.python-version }}
      #     mamba-version: "*"
      #     channels: conda-forge, pytorch, nvidia
      #     environment-file: environment.yml
      #     activate-environment: test_gpu_install_env
      
      # - name: ARM env setup
      #   uses: conda-incubator/setup-miniconda@v3
      #   if: ${{matrix.os == 'macos-latest'}}
      #   with:
      #     auto-update-conda: true
      #     python-version: ${{ matrix.python-version }}
      #     mamba-version: "*"
      #     channels: conda-forge, pytorch, nvidia
      #     environment-file: macos-arm-environment.yml
      #     activate-environment: test_gpu_install_env
      
      # - name: Install CUDA libraries with conda and link directories
      #   if: ${{ !startsWith(matrix.os, 'macos') }}
      #   run: |
      #     mamba install -c conda-forge cupy cuda-nvcc cuda-libraries-dev cuda-version=${{ matrix.cuda-version }}
      #     echo "(CUDAHOME=$CONDA_PREFIX)" >> "$GITHUB_ENV"
      #     echo $(which nvcc)
      #     nvcc -V
      #     ln -s $CONDA_PREFIX/lib $CONDA_PREFIX/lib64
      #     cp -r $CONDA_PREFIX/targets/$(ls $CONDA_PREFIX/targets/ | head -1)/include/* $CONDA_PREFIX/include/ 

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.20.0
        env:
          CIBW_BEFORE_BUILD: bash scripts/build_env.sh "${{ matrix.os }}" ${{ matrix.cuda-version }}
          CIBW_ENVIRONMENT: LIBRARY_PATH=$CONDA_PREFIX/lib CONDA_PREFIX=$CONDA_PREFIX CUDAHOME=$CONDA_PREFIX 
        with: 
          config-file: "pyproject.toml"
          package-dir: $(find dist/*.tar.gz)

      - name: Produce artifact of wheel for testing
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

      # - name: Pip install the built wheel
      #   run: python -m pip install ./dist/*.whl

      # - name: Run module tests
      #   run: |
      #     cd ./few/tests/module_tests
      #     python -m unittest discover

      # - name: Upload wheel to test PYPI
      #   run: |
      #     twine upload --repository-url https://test.pypi.org/legacy/ --username __token__ --password ${{secrets.TEST_PYPI_UPLOAD_TOKEN}} ./dist/*
